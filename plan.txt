1.Реализовать запрос для получения всех книг:

Добавить поле all_books в класс Query, которое будет возвращать список всех книг.
Реализовать логику в resolve_all_books для получения всех книг из базы данных.

2.Реализовать запрос для получения книги по ID:

Добавить поле book в класс Query, которое будет принимать ID книги и возвращать соответствующий BookType.
Реализовать логику в resolve_book для получения книги из базы данных по ID.

3.Реализовать мутацию для обновления книги:
Создать новую мутацию UpdateBook, которая будет принимать ID книги и обновленные данные.
Реализовать логику в mutate для обновления книги в базе данных.

4.Реализовать мутацию для удаления книги:

Создать новую мутацию DeleteBook, которая будет принимать ID книги.
Реализовать логику в mutate для удаления книги из базы данных.

5.Добавить валидацию входных данных:

Проверить, что все обязательные поля были предоставлены при создании или обновлении книги.
Убедиться, что данные соответствуют ожидаемым типам (например, price должен быть числом).

6.Добавить авторизацию и права доступа:

Реализовать систему авторизации, чтобы только авторизованные пользователи могли выполнять определенные операции (например, создание, обновление или удаление книг).
Добавить поля createdBy и updatedBy в модель Book, чтобы отслеживать, кто создал или обновил книгу.

7.Добавить пагинацию и фильтрацию:

Реализовать пагинацию для запроса all_books, чтобы возвращать книги порциями.
Добавить фильтрацию, чтобы пользователи могли искать книги по различным критериям (например, по названию, автору, категории).

8.Интеграция с другими сервисами:

Связать приложение с другими сервисами(сервис для обработки платежей, сервис для отправки
электронных писем)